1. Написать скрипт, создающий иерархию каталогов, отражающих книжную библиотеку, со следующими свойствами:
   - Каталог верхнего уровня (его имя/путь задаётся первым аргументом командной строки)
   +-- Файл-маркер «.library» с текстом «library v1.0»
   +-- Подкаталоги «books» и «authors», в которых:
   |     владелец можете делать что угодно;
   |     все остальные могут получать доступ к файлам в каталоге (в том числе видеть их имена), но не могут их (файлы) добавлять или удалять.
   +-- Подкаталог «prices», в котором:
   |     владелец можете делать что угодно;
   |     члены группы (указывается вторым аргументом скрипта) могут получать доступ к файлам в каталоге, но не могут их (файлы) добавлять или удалять;
   |     все остальные могут только обращаться к файлам в каталоге, зная их имя, но не могут получить список содержимого каталога.
   +-- Подкаталог «.tmp», устроенный аналогично системному «/tmp», но доступный только вам и членам (указанной вторым аргументом скрипта) группы.

   По умолчанию к каталогам, включая каталог верхнего уровня иерархии, вы должны иметь полный доступ, а все остальные должны иметь возможность считывать список их содержимого и получать к оному доступ.

   Если какой-то каталог уже существует, то создавать его не нужно, равно как и проверять права доступа к ему.

   При возникновении сбоя работа скрипта должна прерываться с сообщением об ошибке. Удобнее всего для этого использовать команды «set -e» и «trap», см. страницу документации шелла («man sh»). Скрипт должен быть спроектирован таким образом, что если его работа оказывается прервана на любом этапе, то повторный запуск с теми же аргументами, при условии отсутствия внешних проблем, корректно завершит начатую ранее работу. 

2. Написать скрипт, добавляющий книгу в созданную выше иерархию следующим образом:
   - Скрипт запускается из любого каталога библиотеки, наполненного скриптом выше. При запуске следует выяснить корневой каталог библиотеки, посредством проверки наличия файла-маркера; если маркер не найден, то следует прекратить работу вместе с выводом сообщения об ошибке. Сам скрипт может находиться где угодно, речь именно про текущий каталог на момент запуска.
   - Параметры скрипта:
      * полный путь к файлу с содержимым книги
      * имя книги
      * цена (допускается дефис или пустая строка, как индикаторы, что цена не известна)
      * имена авторов (должен быть указан минимум один автор)
     То есть, скрипт должен принимать произвольное количество аргументов, но не менее четырёх.
   - Файл с содержимым книги помещается в каталог «books» с именем книги. Если книга с таким названием уже существует, то к её имени добавляется строчка «.1»; если такое имя тоже есть, то «.2» и так далее. Подсказка: "while [ -e "${name}${suffix}" ]». Права доступа — владелец и группа могут читать и править файл, остальные — только читать.
   - Если была указана цена, то в каталоге «prices» создаётся файл названием вида «BOOK.price», где «BOOK» — имя созданного выше файла книги. Содержание файла — ровно одна текстовая строчка, содержащая в себе цену. Права доступа — владелец может читать и править файл, остальные — только читать.
   - Для каждого автора в каталоге «authors» создаётся подкаталог с именем автора (если таковой ещё не существует). Права доступа такие же как к каталогу «authors».
   - Для каждого автора в его каталоге с помощью команды «ln» создаётся жёсткая ссылка на файл книги, название ссылки совпадает с названием файла книги.
   — Файл с содержимым книги следует сначала скопировать в каталог «.tmp» библиотеки, и уже оттуда переместить на нужное место. Будьте готовы объяснить, что это даёт.

Все скрипты не должны выводить ничего не экран при отсутствии сбоев. Однако допускается добавление поддержки опциональных ключей командной строки, изменяющих поведение скрипта, для отладочных и прочих целей.

Запуск скрипта с неверными аргументами (в том числе вообще без аргументов) должен приводить к выводу на stderr (echo >&2) сообщения с информацией о том, как следует
пользоваться скриптом. Пример:

#!/bin/sh
usage() {
	for msg in "$@"; do printf "%s\n" "${0##*/}: $msg" >&2; done
	echo "usage: ${0##*/} [-v] source name price author ..." >&2
	exit 1
}
# ...
test $# -ge 4 || usage "not enough arguments"

Пример готовой иерархии находится в подкаталоге lab3-example-dir. Его можно удобно просмотреть целиком командой «find lab3-example-dir -ls».
