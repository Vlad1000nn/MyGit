import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Функция равномерного распределения на [a, b]
def F(x, a, b):
    if x < a:
        return 0.0
    elif x > b:
        return 1.0
    else:
        return (x - a) / (b - a)

# функция построения графика эмпирической функции распределения и графика функции распределения равномерного на [a, b]
def empirical_distribution_function(data, a, b, n_i):
    for i in range(len(n_i) - 1):
        plt.plot([data[i], data[i + 1]], [n_i[i] / len(data), n_i[i] / len(data)], color='blue')

    x = np.linspace(a - 0.1, b + 0.1)
    y = [F(x_, a, b) for x_ in x]

    plt.plot(x, y, color='red')
    plt.plot([data[-1], data[-1]], [1, 1], color='blue')
    plt.yticks(np.arange(0, 1 + 0.05, 0.05))

    plt.show()

# Функция вычисления DN
def calc_DN(data, a, b, n_i):
    DN = np.max([np.fabs(n_i[0] / len(data) - F(data[0], a, b)), np.fabs(0.0 - F(data[0], a, b))])

    for j in range(1, len(data)):
        curr = np.max(
            [np.fabs(n_i[j] / len(data) - F(data[j], a, b)), np.fabs((n_i[j] - 1) / len(data) - F(data[j], a, b))])
        DN = np.max([DN, curr])

    return DN

# Функция вычисления y*
def calc_y_(data, a, b, n_i):
    y_ = 0

    for j in range(1, len(data)):
        curr = np.max([np.fabs(n_i[j] / len(data) - F(data[j], a, b)), np.fabs((n_i[j] - 1) / len(data) - F(data[j], a, b))])
        if DN == curr:
            return data[j], j

# Функция построения таблицы Колмогорова
def build_Kolmogorov_table(data, a, b, DN, y_, j, n_i):
    t4 = DN * np.sqrt(len(data))
    t6 = F(y_, a, b)
    t7 = j / len(data)
    t8 = (j - 1) / len(data) if j != 0 else 0
    Kolmogorov_table = pd.DataFrame({'a' : [a], 'b' : b, 'N' : len(data), 'Dn' : DN, 'DNsqrt(N)' : t4, 'y*' : y_, 'F(y*)' : t6,
                                     'FN(y*)' : t7, 'FN(y*-0)' : t8})
    return Kolmogorov_table


# Основная функция выполнения программы
if __name__ == "__main__":
    data = [2.15728, 5.93575, 6.39320, 5.30544, 2.68192, 6.61254, 2.66765, 4.56634, 5.47531, 6.45514,
            6.62648, 6.90638, 4.26525, 6.92497, 6.70256, 5.69756, 6.97418, 2.50963, 6.25499, 6.81103,
            4.19086, 4.71120, 5.90534, 3.50848, 4.70610, 4.97469, 3.55839, 4.87774, 2.74817, 5.40123,
            5.12062, 2.17134, 2.82728, 4.09537, 2.20941, 4.42967, 3.63950, 4.18162, 3.65802, 4.26253,
            5.39279, 4.09511, 4.42056, 2.32507, 3.45804, 2.14439, 3.47139, 5.62864, 5.52109, 6.91944,
            3.38828, 5.01095, 4.96421, 3.26545, 4.51203, 2.65348, 4.34462, 3.49680, 6.54504, 2.53851,
            6.63031, 2.28558, 5.81904, 6.38362, 3.60229, 3.87069, 2.25934, 4.36820, 3.46706, 4.80593,
            5.74930, 5.52692, 6.48077, 2.28828, 2.30999, 3.45401, 6.88083, 4.10371, 4.77270, 3.49181,
            6.02015, 4.99633, 5.59136, 3.17908, 3.08568, 5.50434, 4.62300, 5.15881, 3.22810, 6.87100,
            2.24214, 6.29892, 4.59299, 5.24833, 6.16764, 6.66242, 4.59044, 3.51266, 5.32065, 5.63943,
            4.52775, 2.69505, 2.39007, 4.98198, 2.30894, 6.70402, 6.16905, 5.50434, 2.31600, 3.09877,
            2.85055, 4.51727, 2.14914, 2.59973, 6.56515, 5.35626, 4.39558, 5.69941, 4.93670, 5.05110,
            3.55599, 3.53431, 6.77877, 6.34682, 3.21034, 6.75730, 3.69125, 3.85964, 4.69059, 6.67128,
            3.39683, 5.69525, 4.08128, 3.00213, 6.83019, 2.19463, 2.79642, 4.98704, 4.80159, 3.15980,
            6.15140, 3.08397, 2.16003, 6.83222, 6.60644, 2.66653, 6.54400, 4.89467, 1.98108, 3.43112,
            4.77019, 4.17266, 4.83952, 2.43099, 2.97523, 4.06272, 5.53993, 4.47138, 5.81726, 2.73078,
            4.80385, 6.74512, 3.99574, 5.65405, 3.85295, 4.84941, 2.33696, 4.64412, 2.40991, 3.04625,
            4.80689, 5.36313, 3.33169, 3.15698, 2.00261, 2.68260, 3.92556, 2.82233, 2.33584, 4.33800,
            1.98821, 6.64689, 3.16062, 6.48791, 3.79783, 5.93702, 6.00430, 6.10933, 2.71402, 6.78253,
            6.38854, 4.11423, 6.71468, 5.32204, 2.34576, 6.17327, 5.07489, 4.50793, 4.36002, 4.37318]
    print(f'ИСХОДНАЯ ВЫБОРКА:\n{data}\n')

    a = 1.98
    b = 6.98

    sorted_data = sorted(data)
    print(f'ОТСОРТИРОВАННАЯ ВЫБОРКА:\n{sorted_data}\n')

    n_i = np.array([0] * len(data))

    for x in data:
        n_i[data.index(x)] += 1
    n_i = n_i.cumsum()

    empirical_distribution_function(sorted_data, a, b, n_i)

    DN = calc_DN(sorted_data, a, b, n_i)
    print(f'DN:\n{DN}\n')

    y_, j = calc_y_(sorted_data, a, b, n_i)
    print(f'y*:\n{y_}\n')

    Kolmogorov_table = build_Kolmogorov_table(sorted_data, a, b, DN, y_, j, n_i)
    print(f'ТАБЛИЦА КОЛМОГОРОВА:\n{Kolmogorov_table}\n')
