/*                ████████████████████████████████████████████████████████████████████████████████████
* 		  ██████████████████████████████████████████████████████████████████████████████████████
* 		  ███████████████████████████▓▓▓▓▓▓▓▓▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓▓▓╬╬╬╬╬╬▓███████████████████████
* 		  ███████████████████████████▓███████▓▓╬╬╬╬╬╬╬╬╬╬╬╬▓███▓▓▓▓█▓╬╬╬▓███████████████████████
* 		  ███████████████████████████████▓█████▓▓╬╬╬╬╬╬╬╬▓███▓╬╬╬╬╬╬╬▓╬╬▓███████████████████████
* 		  ████████████████████████████▓▓▓▓╬╬▓█████╬╬╬╬╬╬███▓╬╬╬╬╬╬╬╬╬╬╬╬╬███████████████████████
* 		  ███████████████████████████▓▓▓▓╬╬╬╬╬╬▓██╬╬╬╬╬╬▓▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓███████████████████████
* 		  ████████████████████████████▓▓▓╬╬╬╬╬╬╬▓█▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓███████████████████████
* 		  ███████████████████████████▓█▓███████▓▓███▓╬╬╬╬╬╬▓███████▓╬╬╬╬▓███████████████████████
* 		  ████████████████████████████████████████▓█▓╬╬╬╬╬▓▓▓▓▓▓▓▓╬╬╬╬╬╬╬███████████████████████
* 		  ███████████████████████████▓▓▓▓▓▓▓╬╬▓▓▓▓▓█▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓███████████████████████
* 		  ████████████████████████████▓▓▓╬╬╬╬▓▓▓▓▓▓█▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓███████████████████████
* 		  ███████████████████████████▓█▓▓▓▓▓▓▓▓▓▓▓▓▓▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓███████████████████████
* 		  █████████████████████████████▓▓▓▓▓▓▓▓█▓▓▓█▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓███████████████████████
* 		  █████████████████████████████▓▓▓▓▓▓▓██▓▓▓█▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬████████████████████████
* 		  █████████████████████████████▓▓▓▓▓████▓▓▓█▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬████████████████████████
* 		  ████████████████████████████▓█▓▓▓▓██▓▓▓▓██╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬████████████████████████
* 		  ████████████████████████████▓▓███▓▓▓▓▓▓▓██▓╬╬╬╬╬╬╬╬╬╬╬╬█▓╬▓╬╬▓████████████████████████
* 		  █████████████████████████████▓███▓▓▓▓▓▓▓▓████▓▓╬╬╬╬╬╬╬█▓╬╬╬╬╬▓████████████████████████
* 		  █████████████████████████████▓▓█▓███▓▓▓████╬▓█▓▓╬╬╬▓▓█▓╬╬╬╬╬╬█████████████████████████
* 		  ██████████████████████████████▓██▓███████▓╬╬╬▓▓╬▓▓██▓╬╬╬╬╬╬╬▓█████████████████████████
* 		  ███████████████████████████████▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓╬╬╬╬╬╬╬╬╬╬╬██████████████████████████
* 		  ███████████████████████████████▓▓██▓▓▓▓▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓██████████████████████████
* 		  ████████████████████████████████▓▓▓█████▓▓╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬▓███████████████████████████
* 		  █████████████████████████████████▓▓▓█▓▓▓▓▓███▓╬╬╬╬╬╬╬╬╬╬╬▓████████████████████████████
* 		  ██████████████████████████████████▓▓▓█▓▓▓╬▓██╬╬╬╬╬╬╬╬╬╬╬▓█████████████████████████████
* 		  ███████████████████████████████████▓▓█▓▓▓▓███▓╬╬╬╬╬╬╬╬╬▓██████████████████████████████
* 		  ██████████████████████████████████████▓▓▓███▓▓╬╬╬╬╬╬╬╬████████████████████████████████
* 		  ███████████████████████████████████████▓▓▓██▓▓╬╬╬╬╬╬▓█████████████████████████████████
* 		  ██████████████████████████████████████████████████████████████████████████████████████
* 		    */



#include <iostream>
#include <iterator>
#include <string>
#include <algorithm>
#include <random>
#include <chrono>

using namespace std;

namespace Random {
	std::mt19937 mt{ std::random_device{}() };

	int get(int min, int max) {
		std::uniform_int_distribution die{ min, max };
		return die(mt);
	}
}

template<typename T>
bool compare(T x, T y) {
	return x > y;
}

//Ставим максимум среди родителя и детей в родителя
template<typename T>
void check(int v, T* arr, int len, bool(*f)(T, T)) {
	int left = 2 * v + 1;
	int right = 2 * v + 2;

	T buff = arr[v];
	if (left < len && f(arr[left], buff)) {
		swap(arr[left], arr[v]);
		buff = arr[v];
		check(left, arr, len, f);
	}
	if (right < len && f(arr[right], buff)) {
		swap(arr[right], arr[v]);
		buff = arr[v];
		check(right, arr, len, f);
	}
}

//МАХ в начало + сравения
template<typename T>
void build(T* arr, int len, bool(*f)(T, T)) {
	if (len < 4) {
		check(0, arr, len, f);
		swap(arr[0], arr[len - 1]);
		return;
	}
	int x = log2(len);
	int v = pow(2, x) - 2;

	while (v-- > 0)
		check(v, arr, len, f);
	swap(arr[0], arr[len - 1]);
}

template<size_t N, typename T>
void MyHeapSort(T(&arr)[N], bool(*f)(T, T) = compare) {
	int len = N + 1;
	while (len-- > 1)
		build(arr, len, f);
}


int main() {
	double Arr[100];

	for (int i = 0; i < 100; i++) {
		Arr[i] = Random::get(1, 1000);
		cout << Arr[i] << ' ';
	}

	MyHeapSort(Arr);

	cout << '\n';
	for (int i = 0; i < 100; i++)
		cout << Arr[i] << ' ';

	return 0;
}