#include <iostream>
#include <vector>
#include <string>
#include <cstring>


using namespace std;

using uint = unsigned int;
using ull = unsigned long long;
using ul = unsigned long;
using ushort = unsigned short;
using uchar = unsigned char;

// BigInt ‚Äî —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
//
// – –µ–∞–ª–∏–∑–æ–≤–∞–Ω –Ω–∞ –≤–µ–∫—Ç–æ—Ä–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π –∑–∞–ø–∏—Å—å—é —Ü–∏—Ñ—Ä
//
// –°—á–∏—Ç–∞–µ–º, —á—Ç–æ —á–∏—Å–ª–æ 0 –∏–º–µ–µ—Ç –∑–Ω–∞–∫ +
//
// BigInt –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–µ–Ω 0
//
//



// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –¥–ª—è long long(–≤—Å—ë —Å–≤–æ–¥–∏—Ç—Å—è –∫ –≤—ã–∑–æ–≤—É –∏–º–µ–Ω–Ω–æ –º–µ—Ç–æ–¥–æ–≤ —Å long long  —Å –∫–∞—Å—Ç–æ–≤–∞–Ω–∏–µ–º)

constexpr int len_f_naivniy = 128;      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞–∏–≤–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏–ª–∏ –ö–∞—Ä–∞—Ü—É–±—ã
constexpr int base = 10;                // –ë–∞–∑–∞ –≤ –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –≤–µ–∫—Ç–æ—Ä–∞

class BigInt
{
private:

    // –í–µ–∫—Ç–æ—Ä —Ü–∏—Ñ—Ä –Ω–∞—à–µ–≥–æ —á–∏—Å–ª–∞
    vector<int> digits;
    // –ó–Ω–∞–∫ —á–∏—Å–ª–∞ (0 +,
    //             1 -) 
    bool sign;
    // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–¥–∏—Ä—É—é—â–∏—Ö –Ω—É–ª–µ–π –∏–∑ *this
    void remove_lead_zeros();
    // –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–¥–∏—Ä—É—é—â–∏—Ö –Ω—É–ª–µ–π –∏–∑ BigInt
    void remove_lead_zeros(vector<int>& _digits) const;

    ////////////////////////–°–õ–û–ñ–ï–ù–ò–ï/////////////////////////////////

        // –°–ª–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Ü–∏—Ñ—Ä –¥–≤—É—Ö BigInt (a >= b) 
    vector<int> addition(const vector<int>& a, const vector<int>& b)    const;

    //////////////////////–í–´–ß–ò–¢–ê–ù–ò–ï///////////////////////////////

            // –°–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –∫ 1 –¥–ª–∏–Ω–µ
    void normalization(vector<int>& a, vector<int>& b)  const;

    // – –∞–∑–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤ —Ü–∏—Ñ—Ä –¥–≤—É—Ö BigInt (–∞ >= b)
    vector<int> subtraction(vector<int> a, vector<int> b)   const;

    //////////////////////–£–ú–ù–û–ñ–ï–ù–ò–ï///////////////////////////////////

        // –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Ü–∏—Ñ—Ä
    vector<int> multiplication(vector<int> a, vector<int> b)    const;

    // –î–æ–≤–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞ –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
    void normalize_vec_to_2n(vector<int>& a, long long n) const;

    // –ê–ª–≥–æ—Ä–∏—Ç–º —É–º–Ω–æ–∂–µ–Ω–∏—è –ö–∞—Ä–∞—Ü—É–±–∞ ( O( n ^ log2(3) ) )
    vector<int> karacuba_multiplication(const vector<int>& a, const vector<int>& b) const;

    // –ë–∞–∑–æ–≤–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –∑–∞ O(n^2), –¥–ª—è —á–∏—Å–µ–ª –¥–ª–∏–Ω—ã <128 (—Ç.–∫. —É —ç—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –º–µ–Ω—å—à–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞)
    vector<int> naivniy_multiplication(const vector<int>& a, const vector<int>& b)      const;

    // –î–µ–ª–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –∏ —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
    void carries(vector<int>& res)  const;
    //////////////////–î–ï–õ–ï–ù–ò–ï////////////////////////////////////////

    // –î–µ–ª–µ–Ω–∏–µ BigInt –Ω–∞ 2
    BigInt div_by_2(BigInt& a)  const;

    ///////////////////////////////////////////////////////

        // –í–µ–∫—Ç–æ—Ä –∞ –º–µ–Ω—å—à–µ => 1, –≤–µ–∫—Ç–æ—Ä b –º–µ–Ω—å—à–µ => 2, a = b => 0
    int vec_compare(const vector<int>& a, const vector<int>& b) const;

public:

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    BigInt();

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
    BigInt(long long number);

    BigInt(ull number);

    BigInt(long number);

    BigInt(ul number);

    BigInt(int number);

    BigInt(uint number);

    BigInt(short number);

    BigInt(ushort number);


    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å—Ç—Ä–æ–∫—É
    BigInt(const string& s);

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤–µ–∫—Ç–æ—Ä —Ü–∏—Ñ—Ä
    BigInt(const vector<int>& vec, bool _sign = false);

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏–π
    BigInt(const BigInt& bigInt);

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –°-—Å—Ç—Ä–æ–∫—É
    BigInt(const char* str);

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å–∏–º–≤–æ–ª(—Ü–∏—Ñ—Ä—É)
    BigInt(const char& c);

    // –°–º–µ–Ω–∞ –∑–Ω–∞–∫–∞ —É —á–∏—Å–ª–∞ (—É–Ω–∞—Ä–Ω—ã–π –º–∏–Ω—É—Å)
    BigInt operator-() const;

    // –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è BigInt
    BigInt& operator=(const BigInt& a);

    // –û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    bool operator==(const BigInt& a)  const;

    // –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö BigInt
    BigInt operator+(const BigInt& a) const;

    // –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥–≤—É—Ö BigInt
    BigInt operator-(const BigInt a)  const;

    // –û–ø–µ—Ä–∞—Ç–æ—Ä —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö BigInt
    BigInt operator*(const BigInt& a) const;

    // –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–µ–ª–µ–Ω–∏—è –¥–≤—É—Ö BigInt
    BigInt operator/(const BigInt& a) const;

    BigInt operator%(const BigInt& a) const;

    // –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è BigInt –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–ø—Ä–∞–≤–∞
    BigInt operator*(const long long x) const;

    BigInt operator*(const ull x)       const;

    BigInt operator*(const long x)      const;

    BigInt operator*(const ul x)        const;

    BigInt operator*(const int x)       const;

    BigInt operator*(const uint x)      const;

    BigInt operator*(const short x)     const;

    BigInt operator*(const ushort x)    const;



    // –°—Ç—Ä–æ–≥–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –±–æ–ª—å—à–µ –¥–ª—è –¥–≤—É—Ö BigInt
    bool operator>(const BigInt& a) const;

    // –ù–µ—Ç—Ä–æ–≥–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –±–æ–ª—å—à–µ –¥–ª—è –¥–≤—É—Ö BigInt
    bool operator>=(const BigInt& a) const;

    // –°—Ç—Ä–æ–≥–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–µ–Ω—å—à–µ –¥–ª—è –¥–≤—É—Ö BigInt
    bool operator<(const BigInt& a) const;

    // –ù–µ—Å—Ç—Ä–æ–≥–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–µ–Ω—å—à–µ –¥–ª—è –¥–≤—É—Ö BigInt
    bool operator<=(const BigInt& a) const;

    // –í—ã–≤–æ–¥ ( _reverse = 0 ‚Äî –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ, -reverse = 1 ‚Äî –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–µ)
    void print(bool _reverse = 0)   const;

    BigInt make_abs() const;

    // –ê—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–ª–µ–≤–∞

    // –£–º–Ω–æ–∂–µ–Ω–∏–µ BigInt –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–≤–∞
    friend BigInt operator*(const long long x, const BigInt& b);

    // –°–ª–æ–∂–µ–Ω–∏–µ BigInt —Å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º —Å–ª–µ–≤–∞
    friend BigInt operator+(const long long x, const BigInt& b);

    // –í—ã—á–∏—Ç–∞–Ω–∏–µ –∏–∑ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ BigInt
    friend BigInt operator-(const long long x, const BigInt& b);

    // –î–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ BigInt
    friend BigInt operator/(const long long x, const BigInt& b);
};



// –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–¥–∏—Ä—É—é—â–∏—Ö –Ω—É–ª–µ–π –∏–∑ *this
void BigInt::remove_lead_zeros()
{
    int index = static_cast<int>(digits.size()) - 1;
    while (!digits[index])
        digits.erase(digits.begin() + index);
}

// –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–¥–∏—Ä—É—é—â–∏—Ö –Ω—É–ª–µ–π –∏–∑ BigInt
void BigInt::remove_lead_zeros(vector<int>& _digits) const
{
    int index = static_cast<int>(_digits.size()) - 1;
    while (!_digits[index] && index > 0)
        --index;

    _digits.resize(index + 1);

    if (!_digits.size()) _digits.push_back(0);
}

////////////////////////–°–õ–û–ñ–ï–ù–ò–ï/////////////////////////////////

// –°–ª–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Ü–∏—Ñ—Ä –¥–≤—É—Ö BigInt (a >= b) 
vector<int> BigInt::addition(const vector<int>& a, const vector<int>& b)    const
{
    // if a == b, a + b = 2 * a

    vector<int> res;
    int carry{}, range{ abs(static_cast<int>(a.size()) - static_cast<int>(b.size())) }, sum_i;

    for (int i = 0; i < b.size(); ++i)
    {
        sum_i = a[i] + b[i];
        res.push_back((sum_i + carry) % base);
        carry = (sum_i + carry) / base;
    }
    if (range)
    {
        for (int i = static_cast<int>(b.size()); i < static_cast<int>(a.size()); ++i)
        {
            sum_i = a[i] + carry;
            res.push_back((sum_i) % base);
            carry = sum_i / base;
        }
    }
    if (carry)  res.push_back(carry);

    return res;
}

//////////////////////–í–´–ß–ò–¢–ê–ù–ò–ï///////////////////////////////

// –°–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –∫ 1 –¥–ª–∏–Ω–µ
void BigInt::normalization(vector<int>& a, vector<int>& b)  const
{
    int count1{};
    while (static_cast<int>(b.size()) + count1 < a.size()) ++count1;
    b.resize(b.size() + count1);
}

// – –∞–∑–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤ —Ü–∏—Ñ—Ä –¥–≤—É—Ö BigInt (–∞ >= b)
vector<int> BigInt::subtraction(vector<int> a, vector<int> b)   const
{
    normalization(a, b);

    vector<int> res(a.size());
    int length = static_cast<int>(a.size());

    for (int i = 0, x; i < length; ++i)
    {
        x = a[i] - b[i];
        if (x < 0)
        {
            x += base;
            a[i + 1] -= 1;
        }
        res[i] = x;
    }
    remove_lead_zeros(res);
    return res;
}

//////////////////////–£–ú–ù–û–ñ–ï–ù–ò–ï///////////////////////////////////

// –£–º–Ω–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤ —Ü–∏—Ñ—Ä
vector<int> BigInt::multiplication(vector<int> a, vector<int> b)    const
{
    long long n = max(static_cast<int>(a.size()), static_cast<int>(b.size()));
    normalize_vec_to_2n(a, n);
    normalize_vec_to_2n(b, n);

    vector<int> res;

    res = karacuba_multiplication(a, b);
    carries(res);

    return res;
}

// –î–æ–≤–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –≤–µ–∫—Ç–æ—Ä–∞ –¥–æ –±–ª–∏–∂–∞–π—à–µ–π —Å—Ç–µ–ø–µ–Ω–∏ –¥–≤–æ–π–∫–∏
void BigInt::normalize_vec_to_2n(vector<int>& a, long long n) const
{
    while (n & (n - 1))     ++n;

    a.resize(n);
}

// –ê–ª–≥–æ—Ä–∏—Ç–º —É–º–Ω–æ–∂–µ–Ω–∏—è –ö–∞—Ä–∞—Ü—É–±–∞ ( O( n ^ log2(3) ) )
vector<int> BigInt::karacuba_multiplication(const vector<int>& a, const vector<int>& b) const
{
    auto len = a.size();
    vector<int> res(2 * len);

    if (len <= len_f_naivniy)   return naivniy_multiplication(a, b);


    auto k = len / 2;

    vector<int> a_right{ a.begin(),a.begin() + k };
    vector<int> a_left{ a.begin() + k,a.end() };
    vector<int> b_right{ b.begin(),b.begin() + k };
    vector<int> b_left{ b.begin() + k,b.end() };

    vector<int> P1 = karacuba_multiplication(a_left, b_left);
    vector<int> P2 = karacuba_multiplication(a_right, b_right);

    vector<int> a_lr(k);
    vector<int> b_lr(k);

    for (int i = 0; i < k; ++i)
    {
        a_lr[i] = a_left[i] + a_right[i];
        b_lr[i] = b_left[i] + b_right[i];
    }

    vector<int> P3 = karacuba_multiplication(a_lr, b_lr);

    for (auto i = 0; i < len; ++i)
    {
        P3[i] -= (P2[i] + P1[i]);
        res[i] = P2[i];
    }


    for (auto i = len; i < 2 * len; ++i)
        res[i] = P1[i - len];

    for (auto i = k; i < len + k; ++i)
        res[i] += P3[i - k];

    return res;
}

// –ë–∞–∑–æ–≤–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –∑–∞ O(n^2), –¥–ª—è —á–∏—Å–µ–ª –¥–ª–∏–Ω—ã <128 (—Ç.–∫. —É —ç—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –º–µ–Ω—å—à–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞)
vector<int> BigInt::naivniy_multiplication(const vector<int>& a, const vector<int>& b)      const
{
    vector<int> res(2 * a.size());

    for (int i = 0; i < static_cast<int>(a.size()); ++i)
    {
        for (int g = 0; g < static_cast<int>(a.size()); ++g)
        {
            res[i + g] += a[i] * b[g];
        }
    }

    return res;
}

// –î–µ–ª–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –∏ —É–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
void BigInt::carries(vector<int>& res)      const
{
    if (res.size() == 1)
    {
        if (res[0] > 9)
        {
            res.push_back(res[0] / base);
            res[0] %= base;
        }
    }
    else
        for (auto i = 0; i < res.size() - 1; ++i)
        {
            res[i + 1] += res[i] / base;
            res[i] %= base;
        }

    remove_lead_zeros(res);
}

//////////////////–î–ï–õ–ï–ù–ò–ï////////////////////////////////////////

// –î–µ–ª–µ–Ω–∏–µ BigInt –Ω–∞ 2
BigInt BigInt::div_by_2(BigInt& a) const
{
    long long length = static_cast<long long>(a.digits.size());
    bool carry = {};
    for (long long i = length - 1; i >= 0; --i)
    {
        a.digits[i] += base * carry;
        carry = a.digits[i] % 2 == 1;
        a.digits[i] /= 2;
    }
    remove_lead_zeros(a.digits);
    return a;
}

///////////////////////////////////////////////////////

// –í–µ–∫—Ç–æ—Ä –∞ –º–µ–Ω—å—à–µ => 1, –≤–µ–∫—Ç–æ—Ä b –º–µ–Ω—å—à–µ => 2, a = b => 0
int BigInt::vec_compare(const vector<int>& a, const vector<int>& b) const
{
    if (a.size() < b.size()) return 1;
    else if (a.size() > b.size()) return 2;
    else
    {
        int length = static_cast<int>(a.size());
        for (int i = length - 1; i >= 0; --i)
            if (a[i] != b[i])
            {
                if (a[i] > b[i])
                    return 2;
                else return 1;
            }

        return 0;
    }
}

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
BigInt::BigInt()
    : digits(1, 0)
    , sign()
{ }

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
BigInt::BigInt(long long number)
{
    sign = (number < 0);
    number = abs(number);   // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
    while (number)
    {
        digits.push_back(number % base);
        number /= base;
    }
    if (!digits.size())
        digits.push_back(0);
}

BigInt::BigInt(ull  number) : BigInt(static_cast<long long>(number))
{ }

BigInt::BigInt(long number) : BigInt(static_cast<long long>(number))
{ }

BigInt::BigInt(ul number) : BigInt(static_cast<long long>(number))
{ }

BigInt::BigInt(int number) : BigInt(static_cast<long long>(number))
{ }

BigInt::BigInt(uint number) : BigInt(static_cast<long long>(number))
{ }

BigInt::BigInt(short number) : BigInt(static_cast<long long>(number))
{ }

BigInt::BigInt(ushort number) : BigInt(static_cast<long long>(number))
{ }


// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å—Ç—Ä–æ–∫—É
BigInt::BigInt(const string& s)
{
    if (s.size())
    {
        for (long long i = static_cast<long long>(s.size()) - 1; i > 0; --i)
        {
            if (s[i] > 47 && s[i] < 58)
                digits.push_back(s[i] - '0');
            //else throw invalid_value();
        }
        sign = (s[0] == '-');
        if (!sign) digits.push_back(s[0] - '0');
    }
    else
    {
        sign = 0;
        digits.push_back(0);
    }
}

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –≤–µ–∫—Ç–æ—Ä —Ü–∏—Ñ—Ä
BigInt::BigInt(const vector<int>& vec, bool _sign)
    : digits(vec)
    , sign(_sign)
{ }

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–æ–ø–∏–π
BigInt::BigInt(const BigInt& bigInt)
    : digits(bigInt.digits)
    , sign(bigInt.sign)
{}

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –°-—Å—Ç—Ä–æ–∫—É
BigInt::BigInt(const char* str)
{
    //if (str == nullptr) throw null_ptr(); // –î–æ–±–∞–≤–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø—Ä–æ—â–µ –±—ã–ª–æ –æ—Ç–ª–æ–≤–∏—Ç—å –æ—à–∏–±–∫—É

    if (strlen(str))
    {
        for (long long i = strlen(str) - 1; i > 0; --i)
        {
            if (str[i] > 47 && str[i] < 58)
                digits.push_back(str[i] - '0');
            //  else throw invalid_value();     //////////////////////// –ú–û–ñ–ù–û –ü–ï– –ï–î–ê–í–ê–¢–¨ –°–ò–ú–í–û–õ –ò –ì–û–í–û– –ò–¢–¨ –ß–¢–û –≠–¢–û –ù–ï –ß–ò–°–õ–û
        }
        sign = (str[0] == '-');
        if (!sign) digits.push_back(str[0] - '0');
    }
    else
    {
        sign = 0;
        digits.push_back(0);
    }
}

// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å–∏–º–≤–æ–ª(—Ü–∏—Ñ—Ä—É)
BigInt::BigInt(const char& c)
{
    if (c > 47 && c < 58)
    {
        digits.push_back(c - '0');
        sign = 0;
    }
    //else throw invalid_value();
}

// –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–æ–º–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –≤–≤–æ–¥–∞ –≤—Å—è–∫–æ–≥–æ –≥–æ–≤–Ω–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤//////////////////////////////

// –°–º–µ–Ω–∞ –∑–Ω–∞–∫–∞ —É —á–∏—Å–ª–∞ (—É–Ω–∞—Ä–Ω—ã–π –º–∏–Ω—É—Å)
BigInt BigInt::operator-()  const
{
    return { this->digits, !this->sign };
}

// –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è BigInt
BigInt& BigInt::operator=(const BigInt& a)
{
    if (&a == this) return *this;

    this->digits = a.digits;
    this->sign = a.sign;
    return *this;
}

// –û–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
bool BigInt::operator==(const BigInt& a)    const
{
    return (this->sign == a.sign) && (vec_compare(this->digits, a.digits) == 0);
}


// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö BigInt
BigInt BigInt::operator+(const BigInt& a)   const
{
    vector<int> res;
    bool res_sign{};
    if (!(this->sign))
    {
        if (!a.sign)    // (+,+)    a + b
        {
            if ((*this) > a)    res = addition(this->digits, a.digits);
            else                res = addition(a.digits, this->digits);
        }
        else     // (+,-)   a + (-b)    a - b
        {
            if ((*this) > a)
                res = subtraction(this->digits, a.digits);
            else
            {
                res = subtraction(a.digits, this->digits);
                res_sign = 1;
            }
        }
    }
    else
    {
        if (!a.sign)    // (-,+)    (-a) - b    -(a + b)
        {
            if ((*this) > a)    res = addition(this->digits, a.digits);
            else                res = addition(a.digits, this->digits);
            res_sign = 1;
        }
        else    // (-,-)    (-a) - (-b)     b - a
        {
            if (a > (*this))
                res = subtraction(a.digits, this->digits);
            else
            {
                res = subtraction(this->digits, a.digits);
                res_sign = 1;
            }
        }
    }

    return { res, res_sign };
}

// –û–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã—á–∏—Ç–∞–Ω–∏—è –¥–≤—É—Ö BigInt
BigInt BigInt::operator-(const BigInt a)    const
{
    if (*this == a) return { 0 };

    vector<int> res;
    bool res_sign{};
    if (!this->sign)
    {
        if (!a.sign)
        {

            if ((*this) > a)
                res = subtraction(this->digits, a.digits);
            else
            {
                res = subtraction(a.digits, this->digits);
                res_sign = 1;
            }
        }
        else
            res = addition(this->digits, a.digits);
    }
    else
    {
        if (!a.sign)
        {
            res = addition(this->digits, a.digits);
            res_sign = 1;
        }
        else
        {
            if ((*this) > a)
                res = subtraction(a.digits, this->digits);
            else
            {
                subtraction(this->digits, a.digits);
                res_sign = 1;
            }
        }
    }
    return { res, res_sign };
}

// –û–ø–µ—Ä–∞—Ç–æ—Ä —É–º–Ω–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö BigInt
BigInt BigInt::operator*(const BigInt& a)   const
{
    vector<int> res;
    bool res_sign{ static_cast<bool>(this->sign ^ a.sign) };

    res = multiplication(this->digits, a.digits);

    return { res, res_sign };
}


// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è BigInt –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–ø—Ä–∞–≤–∞
BigInt BigInt::operator*(const long long x) const
{
    return (*this) * BigInt { x };
}

BigInt BigInt::operator*(const ull x)       const
{
    return ((*this) * static_cast<long long>(x));
}

BigInt BigInt::operator*(const long x)      const
{
    return ((*this) * static_cast<long long>(x));
}

BigInt BigInt::operator*(const ul x)        const
{
    return ((*this) * static_cast<long long>(x));
}

BigInt BigInt::operator*(const int x)       const
{
    return ((*this) * static_cast<long long>(x));
}

BigInt BigInt::operator*(const uint x)      const
{
    return ((*this) * static_cast<long long>(x));
}

BigInt BigInt::operator*(const short x)     const
{
    return ((*this) * static_cast<long long>(x));
}

BigInt BigInt::operator*(const ushort x)    const
{
    return ((*this) * static_cast<long long>(x));
}



// –û–ø–µ—Ä–∞—Ç–æ—Ä –¥–µ–ª–µ–Ω–∏—è –¥–≤—É—Ö BigInt

//  –°–¢–û–ü –Ø –ó–ê–ë–´–õ –ü– –û –ó–ù–ê–ö –ò –ï–©–Å –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –ú–û–ñ–ù–û –Æ–ó–ê–¢–¨ –î–õ–Ø –î–ï–õ–ï–ù–ò–Ø –° –û–°–¢–ê–¢–ö–û–ú (*THIS - ANSWER –û–°–¢–ê–¢–û–ö) 
BigInt BigInt::operator/(const BigInt& a)   const
{
    //if (a == 0)   throw math_error();
    if ((*this) == 0) return 0;

    BigInt l{}, r{ (*this) }, mid, ans{ 0 }, sum, current;
    while (l <= r)
    {
        sum = r + l;
        mid = div_by_2(sum);
        current = a * mid;
        if (current < (*this))
        {
            ans = mid;
            l = mid + 1;
        }
        else if (current > (*this))
            r = mid - 1;
        else return mid;
    }
    if (!(ans == 0))
        ans.sign = this->sign ^ a.sign;
    return ans;
}

// –û–ø–µ—Ä–∞—Ç–æ—Ä –≤–∑—è—Ç–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –ø—Ä–∏ –¥–µ–ª–µ–Ω–∏–∏ –Ω–∞ BigInt
BigInt BigInt::operator%(const BigInt& a)   const
{
    //if (a.sign) throw math_error();

    if (this->sign)
    {
        BigInt temp = ((*this).make_abs() - (a * ((*this).make_abs() / a)));
        if (temp == 0) return 0;
        else
            return a - temp;
    }

    return (*this) - (a * ((*this) / a));
}

// –°—Ç—Ä–æ–≥–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –±–æ–ª—å—à–µ –¥–ª—è –¥–≤—É—Ö BigInt
bool BigInt::operator>(const BigInt& a)     const
{
    // –ï—Å–ª–∏ –∑–Ω–∞–∫–∏ —Ä–∞–≤–Ω—ã –¥–≤–∞ —Å–ª—É—á–∞—è
    if ((this->sign && a.sign) || (!(this->sign) && !a.sign))
    {
        return (vec_compare(this->digits, a.digits) == 2);
    }
    else if (this->sign && !a.sign) return false;
    else return true;

}

// –ù–µ—Ç—Ä–æ–≥–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –±–æ–ª—å—à–µ –¥–ª—è –¥–≤—É—Ö BigInt
bool BigInt::operator>=(const BigInt& a)    const
{
    if ((this->sign && a.sign) || (!(this->sign) && !a.sign))
    {
        return (vec_compare(this->digits, a.digits) != 1);
    }
    else if (this->sign && !a.sign) return false;
    else return true;

}

// –°—Ç—Ä–æ–≥–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–µ–Ω—å—à–µ –¥–ª—è –¥–≤—É—Ö BigInt
bool BigInt::operator<(const BigInt& a)     const
{
    if ((this->sign && a.sign) || (!(this->sign) && !a.sign))
        return (vec_compare(this->digits, a.digits)) == 1;
    else if (this->sign && !a.sign) return true;
    else return false;
}

// –ù–µ—Å—Ç—Ä–æ–≥–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –º–µ–Ω—å—à–µ –¥–ª—è –¥–≤—É—Ö BigInt
bool BigInt::operator<=(const BigInt& a)    const
{
    if ((this->sign && a.sign) || (!(this->sign) && !a.sign))
        return (vec_compare(this->digits, a.digits)) != 2;
    else if (this->sign && !a.sign) return true;
    else return false;
}

// –í—ã–≤–æ–¥ ( _reverse = 0 ‚Äî –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ, _reverse = 1 ‚Äî –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–µ)
void BigInt::print(bool _reverse)           const
{
    if (!_reverse)
    {
        if (sign) cout << '-';
        for (int i = static_cast<int>(digits.size() - 1); i >= 0; --i)
            cout << digits[i];
    }
    else
    {
        for (int i = 0; i < static_cast<int>(digits.size()); ++i)
            cout << digits[i];
        if (sign) cout << '-';
    }
}

// –í–∑—è—Ç–∏–µ –º–æ–¥—É–ª—è –æ—Ç —á–∏—Å–ª–∞
BigInt BigInt::make_abs()   const
{
    return { this->digits,0 };
}

// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
// –ª–∏–±–æ 2 –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–≤–æ–¥/–≤—ã–≤–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// 
// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥
ostream& operator<<(ostream& out, const BigInt& a)
{
    a.print();
    return out;
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
istream& operator>>(istream& in, BigInt& a)
{
    string s;
    in >> s;
    a = s;
    return in;
}



// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–ª–µ–≤–∞


// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è BigInt –Ω–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–≤–∞
BigInt operator*(const long long x, const BigInt& b)
{
    return BigInt{ x } *b;
}

BigInt operator*(const ull x, const BigInt& a)
{
    return (static_cast<long long>(x) * a);
}

BigInt operator*(const long x, const BigInt& a)
{
    return (static_cast<long long>(x) * a);
}

BigInt operator*(const ul x, const BigInt& a)
{
    return (static_cast<long long>(x) * a);
}

BigInt operator*(const int x, const BigInt& a)
{
    return (static_cast<long long>(x) * a);
}

BigInt operator*(const uint x, const BigInt& a)
{
    return (static_cast<long long>(x) * a);
}

BigInt operator*(const short x, const BigInt& a)
{
    return (static_cast<long long>(x) * a);
}

BigInt operator*(const ushort x, const BigInt& a)
{
    return (static_cast<long long>(x) * a);
}



// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤—ã—á–∏—Ç–∞–Ω–∏—è –∏–∑ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ BigInt
BigInt operator-(const long long x, const BigInt& b)
{
    return BigInt{ x } - b;
}

BigInt operator-(const ull x, const BigInt& a)
{
    return (static_cast<long long>(x) - a);
}

BigInt operator-(const long x, const BigInt& a)
{
    return (static_cast<long long>(x) - a);
}

BigInt operator-(const ul x, const BigInt& a)
{
    return (static_cast<long long>(x) - a);
}

BigInt operator-(const int x, const BigInt& a)
{
    return (static_cast<long long>(x) - a);
}

BigInt operator-(const uint x, const BigInt& a)
{
    return (static_cast<long long>(x) - a);
}

BigInt operator-(const short x, const BigInt& a)
{
    return (static_cast<long long>(x) - a);
}

BigInt operator-(const ushort x, const BigInt& a)
{
    return (static_cast<long long>(x) - a);
}



// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–µ–ª–µ–Ω–∏—è —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ BigInt
BigInt operator/(const long long x, const BigInt& b)
{
    return BigInt{ x } / b;
}

BigInt operator/(const ull x, const BigInt& a)
{
    return (static_cast<long long>(x) / a);
}

BigInt operator/(const long x, const BigInt& a)
{
    return (static_cast<long long>(x) / a);
}

BigInt operator/(const ul x, const BigInt& a)
{
    return (static_cast<long long>(x) / a);
}

BigInt operator/(const int x, const BigInt& a)
{
    return (static_cast<long long>(x) / a);
}

BigInt operator/(const uint x, const BigInt& a)
{
    return (static_cast<long long>(x) / a);
}

BigInt operator/(const short x, const BigInt& a)
{
    return (static_cast<long long>(x) / a);
}

BigInt operator/(const ushort x, const BigInt& a)
{
    return (static_cast<long long>(x) / a);
}



// –ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª–æ–∂–µ–Ω–∏—è BigInt —Å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º —Å–ª–µ–≤–∞
BigInt operator+(const long long x, const BigInt& b)
{
    return BigInt{ x } + b;
}

BigInt operator+(const ull  x, const BigInt& a)
{
    return (static_cast<long long>(x) + a);
}

BigInt operator+(const long x, const BigInt& a)
{
    return (static_cast<long long>(x) + a);
}

BigInt operator+(const ul x, const BigInt& a)
{
    return (static_cast<long long>(x) + a);
}

BigInt operator+(const int x, const BigInt& a)
{
    return (static_cast<long long>(x) + a);
}

BigInt operator+(const uint x, const BigInt& a)
{
    return (static_cast<long long>(x) + a);
}

BigInt operator+(const short x, const BigInt& a)
{
    return (static_cast<long long>(x) * a);
}

BigInt operator+(const ushort x, const BigInt& a)
{
    return (static_cast<long long>(x) * a);
}

int main()
{
    BigInt a, b;
    cin >> a >> b;
    cout << a / b;
}